#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('chat:server');
var http = require('http');

var SessionSockets = require('session.socket.io');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Socket IO part
 **/

var io = require('socket.io')(server);


var ios = require('socket.io-express-session');
io.use(ios(app.session));
io.of('/anton').use(function(socket, next) {
  var handshakeData = socket.request;
  next();
});


io.on('connection', function(socket) {
  var username = socket.handshake.session.username;
  console.log('user connected');

  var connectedWelcomeUser = JSON.stringify({
    username: username,
    message: 'Welcome ' + username + ' to the chat'
  });

  var connectedNewUser = JSON.stringify({
    username: username,
    message: 'New User ' + username + ' Come to Chat'
  });

  socket.emit('connected', connectedWelcomeUser);
  socket.broadcast.emit('connected', connectedNewUser);

  socket.on('disconnect', function() {
    console.log('user disconnected');
    io.emit('offline', username);
    io.emit('disconnected', 'User ' + username + ' disconected ');
  });

  socket.on('chat message', function(msg) {
    var message = username + ':' + ' ' + msg;
    io.emit('chat message', message);
  });


});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
